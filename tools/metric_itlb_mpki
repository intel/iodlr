#!/bin/bash -x

# Copyright (C) 2018 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.Â  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
# OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
# OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

SCRIPTS_DIR=`dirname $0`
source ${SCRIPTS_DIR}/utils.sh

function help_itlb_mpki() {
	echo "      Measure ITLB misses per Kilo-instruction, for 4k and large (2M/1G) pages."
}

function init_itlb_mpki() {
  #Comma seperated perf supported counter names. See example below"
  local local_pmu_array=(instructions itlb_misses.walk_completed itlb_misses.walk_completed_4k itlb_misses.walk_completed_2m_4m itlb_misses.walk_completed_1g)
  local local_pmus
  for item in ${local_pmu_array[*]}
  do
    if [ "x${local_pmus}" == "x" ]; then
      local_pmus="$item"
    else
      local_pmus="$local_pmus,$item"
    fi
  done
  echo $local_pmus
}

function calc_itlb_default_mpki() {
  local perf_data_file="$1"
  echo
  echo "================================================="
  echo "Final itlb_mpki metric"
  echo "--------------------------------------------------"
  echo "FORMULA: metric_ITLB_MPKI(%) = 1000*(a/b)"
  echo "         where, a=itlb_misses.walk_completed"
  echo "                b=instructions"
  echo "================================================="

  local a=`return_pmu_value "itlb_misses.walk_completed" ${perf_data_file}`
  local b=`return_pmu_value "instructions" ${perf_data_file}`
  if [ $a == -1 -o $b == -1 ]; then
    echo "ERROR: metric_ITLB_MPKI can't be derived. Missing pmus"
  else
    local metric=`echo "scale=$bc_scale;1000*(${a}/${b})"| bc -l`
    echo "metric_ITLB_MPKI(%)=${metric}"
  fi
  
}

function calc_itlb_4k_mpki() {
  local perf_data_file="$1"
  echo
  echo "================================================="
  echo "Final itlb_4k_mpki metric"
  echo "--------------------------------------------------"
  echo "FORMULA: metric_ITLB_4K_MPKI(%) = 1000*(a/b)"
  echo "         where, a=itlb_misses.walk_completed_4k"
  echo "                b=instructions"
  echo "================================================="

  local a=`return_pmu_value "itlb_misses.walk_completed_4k" ${perf_data_file}`
  local b=`return_pmu_value "instructions" ${perf_data_file}`
  if [ $a == -1 -o $b == -1 ]; then
    echo "ERROR: metric_ITLB_4K_MPKI can't be derived. Missing pmus"
  else
    local metric=`echo "scale=$bc_scale;1000*(${a}/${b})"| bc -l`
    echo "metric_ITLB_4K_MPKI(%)=${metric}"
  fi
  echo
}

function calc_itlb_2m_4m_mpki() {
  local perf_data_file="$1"
  echo
  echo "================================================="
  echo "Final itlb_2M_4M_mpki metric"
  echo "--------------------------------------------------"
  echo "FORMULA: metric_ITLB_2M_4M_MPKI(%) = 1000*(a/b)"
  echo "         where, a=itlb_misses.walk_completed_2m_4m"
  echo "                b=instructions"
  echo "================================================="

  local a=`return_pmu_value "itlb_misses.walk_completed_2m_4m" ${perf_data_file}`
  local b=`return_pmu_value "instructions" ${perf_data_file}`
  if [ $a == -1 -o $b == -1 ]; then
    echo "ERROR: metric_ITLB_2M_4M_MPKI can't be derived. Missing pmus"
  else
    local metric=`echo "scale=$bc_scale;1000*(${a}/${b})"| bc -l`
    echo "metric_ITLB_2M_4M_MPKI(%)=${metric}"
  fi
  echo
}

function calc_itlb_1g_mpki() {
  local perf_data_file="$1"
  echo
  echo "================================================="
  echo "Final itlb_1G_mpki metric"
  echo "--------------------------------------------------"
  echo "FORMULA: metric_ITLB_1G_MPKI(%) = 1000*(a/b)"
  echo "         where, a=itlb_misses.walk_completed_1g"
  echo "                b=instructions"
  echo "================================================="

  local a=`return_pmu_value "itlb_misses.walk_completed_1g" ${perf_data_file}`
  local b=`return_pmu_value "instructions" ${perf_data_file}`
  if [ $a == -1 -o $b == -1 ]; then
    echo "ERROR: metric_ITLB_1G_MPKI can't be derived. Missing pmus"
  else
    local metric=`echo "scale=$bc_scale;1000*(${a}/${b})"| bc -l`
    echo "metric_ITLB_1G_MPKI(%)=${metric}"
  fi
  echo
}

function calc_itlb_mpki() {
  local perf_data_file="$1"
  calc_itlb_default_mpki $perf_data_file
  calc_itlb_4k_mpki $perf_data_file
  calc_itlb_2m_4m_mpki $perf_data_file
  calc_itlb_1g_mpki $perf_data_file
}
