worker_processes  96; # Depends on #vcpus

load_module /home/base/nginx_install/modules/ngx_ssl_engine_qat_module.so;

error_log __NGINX_TEMP_DIR__/nginx-error.log;
pid __NGINX_PID_FILE__;


ssl_engine{
   use_engine qatengine;
   default_algorithms ALL;
   qat_engine{
      qat_notify_mode poll;
      qat_offload_mode async;
      qat_external_poll_interval 1;
   }
}


worker_rlimit_nofile 1000000;


events {
  use epoll;
  worker_connections 8192;
  multi_accept on;
  accept_mutex on;
}

http {
  ssl_buffer_size 65536;
  include       __NGINX_CONFIG_ROOT__/mime.types;
  default_type  application/octet-stream;

  log_format main '$status $body_bytes_sent $request_time "$request"';

  types_hash_max_size 4096;
  types_hash_bucket_size 64;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout    __NGINX_KEEPALIVE_TIMEOUT__;
  fastcgi_read_timeout __NGINX_FASTCGI_READ_TIMEOUT__;

  #gzip  on;

  #__NGINX_RESOLVER__

  server {
    listen [::]:__HTTP_PORT__ reuseport backlog=131072 so_keepalive=off ssl;
    listen __HTTP_PORT__ reuseport backlog=131072 so_keepalive=off ssl;

    keepalive_timeout 0s;
    tcp_nopush on;
    tcp_nodelay on;
    ssl_verify_client off;
    ssl_session_tickets off;
    lingering_close off;
    lingering_time 1;
    ssl_asynch on;

    # https certificate lines
    ssl_certificate /home/base/certificates/server.crt;
    ssl_certificate_key /home/base/certificates/server.key;
    ssl_certificate /home/base/certificates/cert.pem;
    ssl_certificate_key /home/base/certificates/key.pem;

    ssl_session_timeout  300s;
    ssl_prefer_server_ciphers   on;
    ssl_protocols  TLSv1.2; #or TLSv1.3;

    ####### comment following line for TLSv1.3
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256;

    ssl_ecdh_curve secp384r1;

    access_log            __NGINX_TEMP_DIR__/access.log main;
    client_body_temp_path __NGINX_TEMP_DIR__/client_temp;
    proxy_temp_path       __NGINX_TEMP_DIR__/proxy_temp;
    fastcgi_temp_path     __NGINX_TEMP_DIR__/fastcgi_temp;
    uwsgi_temp_path       __NGINX_TEMP_DIR__/uwsgi_temp;
    scgi_temp_path        __NGINX_TEMP_DIR__/scgi_temp;
    root __FRAMEWORK_ROOT__;
    index index.php;

    location / {
      try_files $uri $uri/ @rewrites;
      expires 7d;
    }

    location @rewrites {
      rewrite ^ /index.php last;
    }

    location ~ [^/]\.php(/|$) {
      fastcgi_split_path_info ^(.+?\.php)(/.*)$;
      if (!-f $document_root$fastcgi_script_name) {
        return 404;
      }

      rewrite /index.php / break;
      __PROXY_PASS__;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      # Siege sets Accept-Encoding: gzip. php5 and php-ng ignore it, but
      # HHVM automatically compresses the output.
      #
      # This means that it's not a like-for-like comparison, and also means
      # that we can't compare bytes sent (nginx) or received (siege) as a
      # sanity check between the two; this sucks, so remove the header.
      #
      # Issue for making HHVM match PHP behavior:
      #   https://github.com/facebook/hhvm/issues/3744
      fastcgi_param HTTP_ACCEPT_ENCODING "";
      proxy_set_header Accept-Encoding "";
      proxy_set_header Host 127.0.0.1:__BACKEND_PORT__;
      include __NGINX_CONFIG_ROOT__/fastcgi_params;
    }
  }

  server {
    listen [::]:__HTTP_ADMIN_PORT__ default_server;
    listen __HTTP_ADMIN_PORT__ default_server;
    access_log            __NGINX_TEMP_DIR__/admin-access.log main;
    client_body_temp_path __NGINX_TEMP_DIR__/admin-client_temp;
    proxy_temp_path       __NGINX_TEMP_DIR__/admin-proxy_temp;
    fastcgi_temp_path     __NGINX_TEMP_DIR__/admin-fastcgi_temp;
    uwsgi_temp_path       __NGINX_TEMP_DIR__/admin-uwsgi_temp;
    scgi_temp_path        __NGINX_TEMP_DIR__/admin-scgi_temp;

    location / {
      proxy_set_header Host 127.0.0.1;
      __ADMIN_PROXY_PASS__;
      include __NGINX_CONFIG_ROOT__/fastcgi_params;
    }
  }
}

