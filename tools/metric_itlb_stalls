#!/bin/bash -x

# Copyright (C) 2018 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, 
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.Â  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
# OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
# OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

SCRIPTS_DIR=`dirname $0`
source ${SCRIPTS_DIR}/utils.sh

function help_itlb_stalls() {
	echo "      Measure percentage of cycles where a code fetch is stalled due to L1 instruction cache tag miss."
}

function init_itlb_stalls() {
  #Comma seperated perf supported counter names. See example below"
  local local_pmu_array=(instructions icache_64b.iftag_stall)
  local local_pmus
  for item in ${local_pmu_array[*]}
  do
    if [ "x${local_pmus}" == "x" ]; then
      local_pmus="$item"
    else
      local_pmus="$local_pmus,$item"
    fi
  done
  echo $local_pmus
}

function calc_itlb_stalls() {
  local perf_data_file="$1"
  echo
  echo "================================================="
  echo "Final itlb_stalls metric"
  echo "--------------------------------------------------"
  echo "FORMULA: metric_ITLB_Misses(%) = 100*(a/b)"
  echo "         where, a=icache_64b.iftag_stall"
  echo "                b=cycles"
  echo "================================================="

  local a=`return_pmu_value "icache_64b.iftag_stall" ${perf_data_file}`
  local b=`return_pmu_value "cycles" ${perf_data_file}`

  if [ $a == -1 -o $b == -1 ]; then
    echo "ERROR: metric_ITLB_Misses can't be derived. Missing pmus"
  else
    local metric=`echo "scale=$bc_scale;100*(${a}/${b})"| bc -l`
    echo "metric_ITLB_Misses(%)=${metric}"
  fi

}
